function bundle GretlGraphiteConnector ( const string use_case_name "Name of use case to build metric prefixes",
                                   const string identifier[null] "Identifier, e.g. team name",
                                   const string GRAPHITE_HOST_DEV[null],
                                   const string GRAPHITE_HOST_PRD[null],
                                   const string INSTANCE_NAME_DEV[null],
                                   const string INSTANCE_NAME_PRD[null],
                                   const bool dev[0] "Run mode: 0=prd (default), 1=dev",
      const bool netcat[1] "Use netcat: 0=use socket (unsupported), 1=use netcat (default)")


    bundle def = defaultGC()	# retrieve default values

    # Initialize the bundle
    bundle self = null
    self.identifier = (exists(identifier)) ? identifier : def.identifier
    self.use_case_name = (exists(use_case_name)) ? use_case_name : def.use_case_name
    self.dev = dev
    self.netcat = netcat
    self.GRAPHITE_HOST_DEV = (exists(GRAPHITE_HOST_DEV)) ? GRAPHITE_HOST_DEV : def.GRAPHITE_HOST_DEV
    self.GRAPHITE_HOST_PRD = (exists(GRAPHITE_HOST_PRD)) ? GRAPHITE_HOST_PRD : def.GRAPHITE_HOST_PRD
    self.INSTANCE_NAME_DEV = (exists(INSTANCE_NAME_DEV)) ? INSTANCE_NAME_DEV : def.INSTANCE_NAME_DEV
    self.INSTANCE_NAME_PRD = (exists(INSTANCE_NAME_PRD)) ? INSTANCE_NAME_PRD : def.INSTANCE_NAME_PRD

    # Further setups
    initialSetup(&self)

    return self
end function


function bundle defaultGC (void)
/* Set default property and connection value */
    bundle self = null
    string self.identifier = "MyTeam"
    string self.use_case_name = ""
    string self.GRAPHITE_HOST_DEV = "some_server-dev.openshift.foo.com"
    string self.GRAPHITE_HOST_PRD = "some_server-prd.openshift.foo.com"
    string self.INSTANCE_NAME_DEV = "test"
    string self.INSTANCE_NAME_PRD = "prod"

    return self
end function


function void initialSetup (bundle *self)
    /* Construct some further variables */

    string self.metric_prefix = strstrip(sprintf("%s.%s", self.identifier, self.use_case_name))
    string mode = (self.dev==0) ? "PRD" : "DEV"
    string self.metric_endpoint = sprintf("%s-monitoring-graphite-carbon-%s", self.INSTANCE_NAME_@mode, self.GRAPHITE_HOST_@mode)
    string self.http_request_addr = sprintf("http://%s-port-exposer-%s/simple_metric", self.INSTANCE_NAME_@mode, self.GRAPHITE_HOST_@mode)
    strings self.buffer = array(0)
    scalar self.nc_timeout = 0.5			# timeout in sec. before netcat launched by shell-cmd quits its job
end function


function void sendTimestampNow (bundle *self, const string metric_name "name of the metric")
/*
   Sends a metric with the current unix timestamp as the metric_value */
    send(&self, metric_name, sprintf("%d000", $now[1]))		# '000' needed for proper date recognition by Graphite
end function


function void sendWithDate (bundle *self, const string metric_name,
                            const string metric_value "Value of the metric",
                            const string send_date "Date string: either Unix timestamp or use the format %Y-%m-%d",
                            const bool buffer[0] "Append metric to bulk load (default: No)")
    /* Sends a metric with a date specified */

    if instring(send_date, "-")
        catch string unix_timestamp = sprintf("%d", strptime(send_date, "%Y-%m-%d"))
        if $error
            funcerr "Type mismatch: 'send_date' must be of type date or string with format %Y-%s-%d"
        endif
    else
        string unix_timestamp = sprintf("%s", send_date)
    endif

    if buffer
        self.buffer += sprintf("%s %s %s", metric_name, metric_value, unix_timestamp)		# append to self.buffer string array
        eval self.buffer
    else
        send(&self, metric_name, metric_value, unix_timestamp)
    endif
end function



function void send (bundle *self,
                    const string metric_name "name of the metric",
                    string metric_value "value of the metric",
                    string send_datetime[null] "Unix timestamp")
    /* Sends a metric with a datetime specified */

    send_datetime = (!exists(send_datetime)) ? sprintf("%d", $now[1]) : send_datetime

    if self.netcat
        sendNetcat(&self, metric_name, metric_value, send_datetime)
    else
        funcerr "Error: Sending via 'socket' is not supported, yet."
    endif
end function


function void sendBuffer (bundle *self)
/* self.buffer is a k-dimension string array where each line has the
   format "%s %s %s" (metric_name, metric_value, str(unix_timestamp)) */

    if self.netcat
        loop i=1..nelem(self.buffer) -q
            strings s = strsplit(self.buffer[i])
            sendNetcat(&self, s[1], s[2], s[3])
        endloop
    else
        funcerr "Sending via 'socket' is not supported, yet."
    endif

    strings self.buffer = array(0)    		# free self.buffer
end function


function void sendNetcat (bundle *self,
                          const string metric_name,
                          string metric_value,
                          string send_datetime[null] "Unix timestamp")
    /* Actual sending through netcat executing a shell command */

    string metric = sprintf("%s.%s", self.metric_prefix, metric_name)
    string send_datetime = (!exists(send_datetime)) ? "`date +%s`" : send_datetime

    string send_string = sprintf("echo \"%s %s %s\" | nc -q %d %s $(curl %s)", \
      metric, sprintf("%s", metric_value), send_datetime, self.nc_timeout, self.metric_endpoint,
      self.http_request_addr)

    print send_string

    catch ! @send_string				# execute shell-cmd; For gretl settings see 'help shell'
    if !$error
        printf "Congrats, you've sent a measure to the Graphite server!\n"
    else
        printf "Error: Failed execution of shell-command\n"
        funcerr "Check whether gretl is allowed to execute shell-scripts."
    endif
end function


